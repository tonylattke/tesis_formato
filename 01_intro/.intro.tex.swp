\chapter*{Introducción}

\pdfbookmark[0]{Introducción}{introduccion} % Sets a PDF bookmark for the dedication

\label{sect:justificacion}
Hoy en día es común que los problemas para los cuales se utilizan herramientas de
la computación se basen en obtener algún resultado en particular. Para esto, los algoritmos
utilizados son en su mayoría determinísticos y por ende los resultados que se esperan
obtener con base a la misma entrada siempre son los mismos.

No se puede cuestionar la confiabilidad de este enfoque, ahora bien, existen otros tipos de
problemas para los cuales es mejor tomar un enfoque no determinístico: Si se toma como 
ejemplo el caso en el que se esta utilizando un software para diseñar habitaciones
de una casa o apartamento, una vez que se estructuran las paredes, ventanas y puertas 
solo faltaría añadir los muebles. Este es un trabajo que requiere algo de esfuerzo si se
espera que el resultado sea de agrado para un cliente. Además dependiendo del nivel
de experticia del diseñador, el modelo podría ser desde muy simple hasta muy complejo
y aún así mantener su consistencia. Con esto ya habría un resultado y tanto el diseñador
como el cliente estarían conformes.

Ahora suponiendo que el artista trabaja como diseñador de interiores y para una 
misma habitación quiere obtener múltiples formas 
de acomodar los muebles para que sus clientes se decidan por una. Esta vez el problema es 
considerablemente más complicado ya que se debe buscar que cada versión sea diferente
y que la solución alcanzada siga siendo viable. En los seres vivos esta función se le atribuye a cierto 
fenómeno mental denominado imaginación. Lamentablemente aún no hay forma de 
recrear este proceso mediante la computación de hoy día. Pero si se lograra 
simularla se podrían obtener incontables beneficios.

Ya existen aproximaciones a este enfoque, la mayoría relacionados con: el diseño gráfico como 
la herramienta \emph{Brain Storm} del programa \emph{After Effects} de \emph{Adobe} \cite{HR10}, que muestra variaciones de los
elementos en pantalla para sugerir posibles modificaciones; la inteligencia artificial, como 
la herramienta Gecode \cite{Gecode}, que permite resolver problemas algebraicos y lógicos para obtener
rangos de soluciones posibles; y el desarrollo de videojuegos, como los juegos de la saga
\emph{Diablo, Minecraft} \cite{B12}, o \emph{Dwarven Fortress} \cite{D08}, en los que los mapas son generados de forma aleatoria
pero mantienen coherencia.

Incluso hay otro tipo de herramientas o que guardan bastante similitud a esta idea.
Entre ellas destaca \emph{QuickCheck} \cite{TQP}, que es una herramienta en \emph{Haskell} que 
permite generar casos de prueba de estructuras que se han descrito. Sin embargo, tiene
como limitación que sólo está hecha para realizar pruebas y no generar soluciones de
salida para aplicaciones en produción.

En el presente trabajo de investigación se explica el proceso y diseño de la herramienta de generación
de estas instancias aleatorias. Partiendo en el desarrollo de un lenguaje de
programación propio (sección \ref{chapter:def_lenguaje}), para luego ahondar en el proceso de resolución de
problemas y asignación de valores (sección \ref{chapter:dise_solver_compilador}). Por último se evaluarán los resultados de
las pruebas hechas sobre la herramienta y se concluirá acerca de sus posibles mejoras y
enfoques para trabajos futuros (sección \ref{chapter:imp_y_res}).
